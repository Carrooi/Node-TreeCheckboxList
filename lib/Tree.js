// Generated by CoffeeScript 1.6.3
(function() {
  var $, Dialog, Tree;

  Dialog = require('modal-dialog');

  $ = null;

  Tree = (function() {
    Tree.counter = 0;

    Tree.idPrefix = 'tree_checkbox_list_';

    Tree.labels = {
      closeButton: 'OK',
      summaryRemove: 'Remove',
      summaryShow: 'Show all',
      summaryHide: 'Hide'
    };

    Tree.prototype.num = 0;

    Tree.prototype.name = null;

    Tree.prototype.data = null;

    Tree.prototype.defaults = null;

    Tree.prototype.dialog = null;

    Tree.prototype.content = null;

    Tree.prototype.summaryElement = null;

    Tree.prototype.resultElement = null;

    Tree.prototype.initialized = false;

    Tree.prototype.title = 'Select';

    function Tree(jquery) {
      var err;
      if (jquery == null) {
        jquery = null;
      }
      if (jquery === null) {
        try {
          jquery = require('jquery');
        } catch (_error) {
          err = _error;
          jquery = window.jQuery;
        }
      }
      if (!jquery) {
        throw new Error('jquery is not defined.');
      }
      $ = jquery;
      Tree.counter++;
      this.defaults = [];
      this.num = Tree.counter;
      this.name = this.getId();
    }

    Tree.prototype.getId = function() {
      return Tree.idPrefix + this.num;
    };

    Tree.prototype.prepare = function() {
      var content, item, name, title, _ref,
        _this = this;
      if (!this.initialized) {
        if (this.data === null) {
          throw new Error('There are no data');
        }
        content = $('<ul>');
        _ref = this.data;
        for (name in _ref) {
          item = _ref[name];
          this.renderBranch(name, item).appendTo(content);
        }
        title = $('<div>', {
          html: $("<span>" + this.title + "</span>")
        });
        $('<input>', {
          type: 'text',
          'data-previous': '',
          keyup: function(e) {
            var input, value;
            input = $(e.target);
            value = input.val();
            if (value !== input.attr('data-previous')) {
              input.attr('data-previous', value);
              return _this.search(value);
            }
          },
          css: {
            float: 'right'
          }
        }).appendTo(title);
        this.dialog = new Dialog;
        this.dialog.header = title;
        this.dialog.content = content;
        this.dialog.addButton(Tree.labels.closeButton, function() {
          return _this.close();
        });
        this.maximize();
        this.renderOutputs();
        return this.initialized = true;
      }
    };

    Tree.prototype.renderBranch = function(name, item, depth) {
      var i, id, line, n, ul, _ref,
        _this = this;
      if (depth == null) {
        depth = 1;
      }
      id = this.getId() + '-' + name;
      line = $('<li>', {
        'class': 'tree-checkbox-list-item'
      });
      $('<input>', {
        id: id,
        type: 'checkbox',
        value: name,
        name: this.name + '[]',
        checked: this.defaults.indexOf(name) !== -1,
        'data-title': item.title,
        change: function(e) {
          return _this.validateCheckbox($(e.target));
        }
      }).appendTo(line);
      $('<label>', {
        'for': id,
        html: item.title
      }).appendTo(line);
      if (typeof item.items !== 'undefined') {
        ul = $('<ul>', {
          'data-depth': depth
        });
        _ref = item.items;
        for (n in _ref) {
          i = _ref[n];
          this.renderBranch(n, i, depth + 1).appendTo(ul);
        }
        ul.appendTo(line);
      }
      return line;
    };

    Tree.prototype.open = function() {
      var _this = this;
      this.prepare();
      return this.dialog.show().then(function() {
        return _this.dialog.header.find('input').focus();
      });
    };

    Tree.prototype.close = function() {
      return this.dialog.hide();
    };

    Tree.prototype.getChildren = function(checkbox, appendSelector) {
      if (appendSelector == null) {
        appendSelector = '';
      }
      return checkbox.parent().children('ul').find('li input[type="checkbox"]' + appendSelector);
    };

    Tree.prototype.getParents = function(checkbox) {
      var parents;
      parents = [];
      checkbox.parents('li.tree-checkbox-list-item').each(function(i, li) {
        if (i > 0) {
          li = $(li);
          return parents.push(li.children('input[type="checkbox"]'));
        }
      });
      return $(parents);
    };

    Tree.prototype.getChecked = function() {
      return this.getContent().find('input[type="checkbox"]:checked');
    };

    Tree.prototype.validateCheckbox = function(checkbox) {
      var checked,
        _this = this;
      checked = checkbox.is(':checked');
      this.getChildren(checkbox).prop('checked', checked);
      this.getParents(checkbox).each(function(i, ch) {
        var selected, total;
        if (checked === false) {
          return ch.prop('checked', false);
        } else {
          total = _this.getChildren(ch).length;
          selected = _this.getChildren(ch, ':checked').length;
          if (total === selected) {
            return ch.prop('checked', true);
          }
        }
      });
      return this.renderOutputs();
    };

    Tree.prototype.getContent = function() {
      return this.dialog.content;
    };

    Tree.prototype.minimize = function() {
      var _this = this;
      return this.getChecked().each(function(i, checkbox) {
        var children, selected;
        checkbox = $(checkbox);
        children = _this.getChildren(checkbox);
        if (children.length > 0) {
          selected = _this.getChildren(checkbox, ':checked').length;
          if (children.length === selected) {
            return children.prop('checked', false);
          }
        }
      });
    };

    Tree.prototype.maximize = function() {
      var _this = this;
      return this.getChecked().each(function(i, checkbox) {
        checkbox = $(checkbox);
        return _this.getChildren(checkbox).prop('checked', true);
      });
    };

    Tree.prototype.getSelectedCount = function() {
      var count;
      this.minimize();
      count = this.getChecked().length;
      this.maximize();
      return count;
    };

    Tree.prototype.setSummaryElement = function(el) {
      var name;
      el = $(el);
      name = el.get(0).nodeName.toLowerCase();
      if ((name !== 'div' && name !== 'input') || (name === 'input' && el.attr('type') !== 'text')) {
        throw new Error('Summary: invalid element');
      }
      return this.summaryElement = el;
    };

    Tree.prototype.setResultElement = function(el) {
      el = $(el);
      if (el.get(0).nodeName.toLowerCase() !== 'input' || el.attr('type') !== 'text') {
        throw new Error('Resule: invalid element');
      }
      if (el.val() !== '') {
        this.defaults = JSON.parse(el.val());
      }
      return this.resultElement = el;
    };

    Tree.prototype.getSelection = function() {
      var result;
      this.minimize();
      result = {};
      this.getChecked().each(function(i, checkbox) {
        checkbox = $(checkbox);
        return result[checkbox.val()] = {
          title: checkbox.attr('data-title')
        };
      });
      this.maximize();
      return result;
    };

    Tree.prototype.serialize = function() {
      var item, name, result, _ref;
      result = [];
      _ref = this.getSelection();
      for (name in _ref) {
        item = _ref[name];
        result.push(name);
      }
      return result;
    };

    Tree.prototype.renderOutputs = function() {
      var count, data, item, li, max, name, result, that, ul;
      if (this.resultElement !== null) {
        this.resultElement.val(JSON.stringify(this.serialize()));
      }
      if (this.summaryElement !== null) {
        data = this.getSelection();
        if (this.summaryElement.get(0).nodeName.toLowerCase() === 'div') {
          ul = $('<ul>');
          count = 0;
          that = this;
          for (name in data) {
            item = data[name];
            count++;
            li = $('<li>', {
              html: item.title
            });
            $('<a>', {
              html: Tree.labels.summaryRemove,
              href: '#',
              'data-name': name,
              click: function(e) {
                var checkbox;
                e.preventDefault();
                checkbox = that.getContent().find('input[type="checkbox"][value="' + $(this).attr('data-name') + '"]');
                checkbox.prop('checked', false);
                return that.validateCheckbox(checkbox);
              }
            }).appendTo(li);
            if (count > 10) {
              li.css({
                display: 'none'
              }).addClass('more');
            }
            li.appendTo(ul);
          }
          this.summaryElement.html('');
          if (count > 10) {
            $('<a>', {
              href: '#',
              'class': 'hidden',
              html: Tree.labels.summaryShow,
              click: function(e) {
                e.preventDefault();
                if ($(this).hasClass('hidden')) {
                  $(this).html(Tree.labels.summaryHide).removeClass('hidden').addClass('showen');
                } else {
                  $(this).html(Tree.labels.summaryShow).removeClass('showen').addClass('hidden');
                }
                return ul.find('li.more').toggle();
              }
            }).appendTo(this.summaryElement);
          }
          return ul.appendTo(this.summaryElement);
        } else {
          count = 0;
          max = 3;
          result = [];
          for (name in data) {
            item = data[name];
            result.push(item.title);
            count++;
            if (count === max) {
              result.push('...');
              break;
            }
          }
          return this.summaryElement.val(result.join(', '));
        }
      }
    };

    Tree.prototype.search = function(text) {
      var content, found, helper, item, name, pattern,
        _this = this;
      pattern = new RegExp(text, 'i');
      found = {};
      helper = function(list) {
        var item, name, _results;
        _results = [];
        for (name in list) {
          item = list[name];
          if (item.title.match(pattern) !== null) {
            found[name] = item;
          }
          if (typeof item.items !== 'undefined') {
            _results.push(helper(item.items));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      helper(this.data);
      content = this.getContent();
      content.find('li:hidden').show();
      content.find('li.found').removeClass('found');
      for (name in found) {
        item = found[name];
        content.find('input[type="checkbox"][value="' + name + '"]').parents('li').addClass('found');
      }
      return content.find('li').filter(function() {
        return !$(this).hasClass('found');
      }).hide();
    };

    return Tree;

  })();

  module.exports = Tree;

}).call(this);
