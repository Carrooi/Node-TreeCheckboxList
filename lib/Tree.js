// Generated by CoffeeScript 1.6.3
(function() {
  var $, Dialog, Q, Tree;

  Dialog = require('modal-dialog');

  Q = require('q');

  $ = null;

  Tree = (function() {
    Tree.counter = 0;

    Tree.idPrefix = 'tree_checkbox_list_';

    Tree.labels = {
      closeButton: 'OK',
      summaryRemove: 'Remove',
      summaryShow: 'Show all',
      summaryHide: 'Hide',
      selected: 'Selected items: %s'
    };

    Tree.prototype.num = 0;

    Tree.prototype.name = null;

    Tree.prototype.data = null;

    Tree.prototype.defaults = null;

    Tree.prototype.dialog = null;

    Tree.prototype.content = null;

    Tree.prototype.summaryElement = null;

    Tree.prototype.summaryMaxItems = {
      input: 3,
      div: 10
    };

    Tree.prototype.resultElement = null;

    Tree.prototype.resultElementFull = false;

    Tree.prototype.resultElementMinimized = true;

    Tree.prototype.initialized = false;

    Tree.prototype.title = 'Select';

    function Tree(jquery) {
      var err;
      if (jquery == null) {
        jquery = null;
      }
      if (jquery === null) {
        try {
          jquery = require('jquery');
        } catch (_error) {
          err = _error;
          jquery = window.jQuery;
        }
      }
      if (!jquery) {
        throw new Error('jquery is not defined.');
      }
      $ = jquery;
      Tree.counter++;
      this.defaults = [];
      this.num = Tree.counter;
      this.name = this.getId();
    }

    Tree.prototype.getId = function() {
      return Tree.idPrefix + this.num;
    };

    Tree.prototype.prepare = function() {
      var content, item, name, title, _ref,
        _this = this;
      if (!this.initialized) {
        if (this.data === null) {
          throw new Error('There are no data');
        }
        content = $('<ul>');
        _ref = this.data;
        for (name in _ref) {
          item = _ref[name];
          this.renderBranch(name, item).appendTo(content);
        }
        title = $('<div>', {
          html: $("<span>" + this.title + "</span>")
        });
        $('<input>', {
          type: 'text',
          'data-previous': '',
          keyup: function(e) {
            var input, value;
            input = $(e.target);
            value = input.val();
            if (value !== input.attr('data-previous')) {
              input.attr('data-previous', value);
              return _this.search(value);
            }
          },
          css: {
            float: 'right'
          }
        }).appendTo(title);
        this.dialog = new Dialog($);
        this.dialog.header = title;
        this.dialog.content = content;
        this.dialog.addButton(Tree.labels.closeButton, function() {
          return _this.close();
        });
        this.dialog.render();
        this.maximize();
        this.renderOutputs();
        return this.initialized = true;
      }
    };

    Tree.prototype.renderBranch = function(name, item, depth) {
      var i, id, line, n, ul, _ref,
        _this = this;
      if (depth == null) {
        depth = 1;
      }
      id = this.getId() + '-' + name;
      line = $('<li>', {
        'class': 'tree-checkbox-list-item'
      });
      $('<input>', {
        id: id,
        type: 'checkbox',
        value: name,
        name: this.name + '[]',
        checked: this.defaults.indexOf(name) !== -1,
        'data-title': item.title,
        change: function(e) {
          return _this.changeSelection($(e.target).attr('value'), false);
        }
      }).appendTo(line);
      $('<label>', {
        'for': id,
        html: item.title
      }).appendTo(line);
      if (typeof item.items !== 'undefined') {
        ul = $('<ul>', {
          'data-depth': depth
        });
        _ref = item.items;
        for (n in _ref) {
          i = _ref[n];
          this.renderBranch(n, i, depth + 1).appendTo(ul);
        }
        ul.appendTo(line);
      }
      return line;
    };

    Tree.prototype.open = function() {
      var deferred,
        _this = this;
      this.prepare();
      deferred = Q.defer();
      this.dialog.show().then(function() {
        _this.dialog.header.find('input').focus();
        return deferred.resolve(_this);
      }).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Tree.prototype.close = function() {
      return this.dialog.hide();
    };

    Tree.prototype.getChildren = function(checkbox, appendSelector) {
      if (appendSelector == null) {
        appendSelector = '';
      }
      return checkbox.parent().children('ul').find('li input[type="checkbox"]' + appendSelector);
    };

    Tree.prototype.getParents = function(checkbox, reversed) {
      var parents;
      if (reversed == null) {
        reversed = false;
      }
      parents = [];
      checkbox.parents('li.tree-checkbox-list-item').each(function(i, li) {
        if (i > 0) {
          li = $(li);
          return parents.push(li.children('input[type="checkbox"]'));
        }
      });
      if (reversed) {
        parents = parents.reverse();
      }
      return $(parents);
    };

    Tree.prototype.getChecked = function() {
      return this.getContent().find('input[type="checkbox"]:checked');
    };

    Tree.prototype.changeSelection = function(name, change) {
      var checkbox, n, _i, _len;
      if (change == null) {
        change = true;
      }
      if (Object.prototype.toString.call(name) === '[object Array]') {
        for (_i = 0, _len = name.length; _i < _len; _i++) {
          n = name[_i];
          this.changeSelection(n);
        }
        return this;
      }
      checkbox = this.getContent().find('input[type="checkbox"][value="' + name + '"]');
      if (checkbox.length === 0) {
        throw new Error('Item ' + name + ' was not found.');
      }
      if (change) {
        checkbox.prop('checked', !checkbox.prop('checked'));
      }
      this.validateCheckbox(checkbox);
      return this;
    };

    Tree.prototype.validateCheckbox = function(checkbox) {
      var checked,
        _this = this;
      checked = checkbox.is(':checked');
      this.getChildren(checkbox).prop('checked', checked);
      this.getParents(checkbox).each(function(i, ch) {
        var selected, total;
        if (checked === false) {
          return ch.prop('checked', false);
        } else {
          total = _this.getChildren(ch).length;
          selected = _this.getChildren(ch, ':checked').length;
          if (total === selected) {
            return ch.prop('checked', true);
          }
        }
      });
      return this.renderOutputs();
    };

    Tree.prototype.getContent = function() {
      return $(this.dialog.content);
    };

    Tree.prototype.minimize = function() {
      var _this = this;
      return this.getChecked().each(function(i, checkbox) {
        var children, selected;
        checkbox = $(checkbox);
        children = _this.getChildren(checkbox);
        if (children.length > 0) {
          selected = _this.getChildren(checkbox, ':checked').length;
          if (children.length === selected) {
            return children.prop('checked', false);
          }
        }
      });
    };

    Tree.prototype.maximize = function() {
      var _this = this;
      return this.getChecked().each(function(i, checkbox) {
        checkbox = $(checkbox);
        return _this.getChildren(checkbox).prop('checked', true);
      });
    };

    Tree.prototype.getSelectedCount = function() {
      var count;
      this.minimize();
      count = this.getChecked().length;
      this.maximize();
      return count;
    };

    Tree.prototype.setSummaryElement = function(el) {
      var name;
      el = $(el);
      name = el.get(0).nodeName.toLowerCase();
      if ((name !== 'div' && name !== 'input') || (name === 'input' && el.attr('type') !== 'text')) {
        throw new Error('Summary: invalid element');
      }
      return this.summaryElement = el;
    };

    Tree.prototype.setResultElement = function(el, resultElementFull, resultElementMinimized) {
      var helpers, items, name, result, value;
      this.resultElementFull = resultElementFull != null ? resultElementFull : this.resultElementFull;
      this.resultElementMinimized = resultElementMinimized != null ? resultElementMinimized : this.resultElementMinimized;
      el = $(el);
      if (el.get(0).nodeName.toLowerCase() !== 'input' || el.attr('type') !== 'text') {
        throw new Error('Result: invalid element');
      }
      if (el.val() !== '') {
        value = JSON.parse(el.val());
        if (Object.prototype.toString.call(value) === '[object Object]') {
          result = [];
          helpers = function(name, items) {
            var i, n, _results;
            if ($.isEmptyObject(items)) {
              return result.push(name);
            } else {
              _results = [];
              for (n in items) {
                i = items[n];
                _results.push(helpers(n, i));
              }
              return _results;
            }
          };
          for (name in value) {
            items = value[name];
            helpers(name, items);
          }
          value = result;
        }
        this.defaults = value;
      }
      return this.resultElement = el;
    };

    Tree.prototype.getSelection = function(full, minimized) {
      var result,
        _this = this;
      if (full == null) {
        full = false;
      }
      if (minimized == null) {
        minimized = true;
      }
      result = {};
      if (minimized === true) {
        this.minimize();
      }
      if (full) {
        this.getChecked().each(function(i, checkbox) {
          var actual, parents;
          checkbox = $(checkbox);
          parents = _this.getParents(checkbox, true);
          if (parents.length === 0) {
            return result[checkbox.val()] = {
              title: checkbox.attr('data-title'),
              items: {},
              checked: true
            };
          } else {
            actual = result;
            return parents.each(function(i, parent) {
              parent = $(parent);
              if (typeof actual[parent.val()] === 'undefined') {
                actual[parent.val()] = {
                  title: parent.attr('data-title'),
                  items: {},
                  checked: parent.prop('checked')
                };
              }
              actual = actual[parent.val()].items;
              if (parents.length - 1 === i) {
                return actual[checkbox.val()] = {
                  title: checkbox.attr('data-title'),
                  items: {},
                  checked: true
                };
              }
            });
          }
        });
      } else {
        this.getChecked().each(function(i, checkbox) {
          checkbox = $(checkbox);
          return result[checkbox.val()] = {
            title: checkbox.attr('data-title'),
            items: {},
            checked: true
          };
        });
      }
      if (minimized === true) {
        this.maximize();
      }
      return result;
    };

    Tree.prototype.serialize = function(full, minimized) {
      var helper, item, name, result, _ref, _ref1;
      if (full == null) {
        full = false;
      }
      if (minimized == null) {
        minimized = true;
      }
      if (full) {
        result = {};
        helper = function(subResult, item) {
          var i, n, _ref, _results;
          _ref = item.items;
          _results = [];
          for (n in _ref) {
            i = _ref[n];
            if (typeof subResult[n] === 'undefined') {
              subResult[n] = {};
            }
            _results.push(helper(subResult[n], i));
          }
          return _results;
        };
        _ref = this.getSelection(true, minimized);
        for (name in _ref) {
          item = _ref[name];
          result[name] = {};
          helper(result[name], item);
        }
      } else {
        result = [];
        _ref1 = this.getSelection(false, minimized);
        for (name in _ref1) {
          item = _ref1[name];
          result.push(name);
        }
      }
      return result;
    };

    Tree.prototype.renderOutputs = function() {
      var count, helper, item, name, result, that, ul, _ref, _ref1,
        _this = this;
      count = this.getChecked().length;
      if (count > 0) {
        this.dialog.changeInfo(Tree.labels.selected.replace(/\%s/g, count));
      } else {
        this.dialog.changeInfo(null);
      }
      if (this.resultElement !== null) {
        this.resultElement.val(JSON.stringify(this.serialize(this.resultElementFull, this.resultElementMinimized)));
      }
      if (this.summaryElement !== null) {
        if (this.summaryElement.get(0).nodeName.toLowerCase() === 'div') {
          ul = $('<ul>');
          that = this;
          count = 0;
          helper = function(name, item) {
            var i, line, n, sub, _ref;
            count++;
            line = $('<li>', {
              html: item.title + ' '
            });
            if (count > _this.summaryMaxItems.div) {
              line.css({
                display: 'none'
              });
              line.addClass('more').addClass('hidden');
            }
            $('<a>', {
              html: Tree.labels.summaryRemove,
              href: '#',
              'data-checked': item.checked,
              'data-name': name,
              click: function(e) {
                var children, parent;
                e.preventDefault();
                name = $(this).attr('data-name');
                if ($(this).attr('data-checked') === 'true') {
                  return that.changeSelection(name);
                } else {
                  parent = that.getContent().find('input[type="checkbox"][value="' + name + '"]');
                  children = [];
                  that.getChildren(parent, ':checked').each(function(i, child) {
                    return children.push($(child).val());
                  });
                  return that.changeSelection(children);
                }
              }
            }).appendTo(line);
            if (!$.isEmptyObject(item.items)) {
              sub = $('<ul>');
              _ref = item.items;
              for (n in _ref) {
                i = _ref[n];
                sub.append(helper(n, i));
              }
              sub.appendTo(line);
            }
            return line;
          };
          _ref = this.getSelection(true);
          for (name in _ref) {
            item = _ref[name];
            ul.append(helper(name, item));
          }
          this.summaryElement.html('');
          if (count > this.summaryMaxItems.div) {
            $('<a>', {
              href: '#',
              'class': 'hidden',
              html: Tree.labels.summaryShow,
              click: function(e) {
                e.preventDefault();
                if ($(this).hasClass('hidden')) {
                  $(this).html(Tree.labels.summaryHide).removeClass('hidden').addClass('showen');
                } else {
                  $(this).html(Tree.labels.summaryShow).removeClass('showen').addClass('hidden');
                }
                return ul.find('li.more').toggle().toggleClass('hidden');
              }
            }).appendTo(this.summaryElement);
          }
          return ul.appendTo(this.summaryElement);
        } else {
          count = 0;
          result = [];
          _ref1 = this.getSelection();
          for (name in _ref1) {
            item = _ref1[name];
            result.push(item.title);
            count++;
            if (count === this.summaryMaxItems.input) {
              result.push('...');
              break;
            }
          }
          return this.summaryElement.val(result.join(', '));
        }
      }
    };

    Tree.prototype.search = function(text) {
      var content, found, helper, item, name, pattern,
        _this = this;
      pattern = new RegExp(text, 'i');
      found = {};
      helper = function(list) {
        var item, name, _results;
        _results = [];
        for (name in list) {
          item = list[name];
          if (item.title.match(pattern) !== null) {
            found[name] = item;
          }
          if (typeof item.items !== 'undefined') {
            _results.push(helper(item.items));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      helper(this.data);
      content = this.getContent();
      content.find('li:hidden').show();
      content.find('li.found').removeClass('found');
      for (name in found) {
        item = found[name];
        content.find('input[type="checkbox"][value="' + name + '"]').parents('li').addClass('found');
      }
      return content.find('li').filter(function() {
        return !$(this).hasClass('found');
      }).hide();
    };

    return Tree;

  })();

  module.exports = Tree;

}).call(this);
